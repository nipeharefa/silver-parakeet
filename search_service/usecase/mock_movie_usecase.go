// Code generated by MockGen. DO NOT EDIT.
// Source: movie_usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMovieUsecase is a mock of MovieUsecase interface
type MockMovieUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUsecaseMockRecorder
}

// MockMovieUsecaseMockRecorder is the mock recorder for MockMovieUsecase
type MockMovieUsecaseMockRecorder struct {
	mock *MockMovieUsecase
}

// NewMockMovieUsecase creates a new mock instance
func NewMockMovieUsecase(ctrl *gomock.Controller) *MockMovieUsecase {
	mock := &MockMovieUsecase{ctrl: ctrl}
	mock.recorder = &MockMovieUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieUsecase) EXPECT() *MockMovieUsecaseMockRecorder {
	return m.recorder
}

// GetMoviesFromAPI mocks base method
func (m *MockMovieUsecase) GetMoviesFromAPI(arg0 string, arg1 int) MovieResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesFromAPI", arg0, arg1)
	ret0, _ := ret[0].(MovieResponse)
	return ret0
}

// GetMoviesFromAPI indicates an expected call of GetMoviesFromAPI
func (mr *MockMovieUsecaseMockRecorder) GetMoviesFromAPI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesFromAPI", reflect.TypeOf((*MockMovieUsecase)(nil).GetMoviesFromAPI), arg0, arg1)
}
